--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         8388608 B, 64 B, 16-way associative
Command:          source/main
Data file:        source/cache.out
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   /home/martin/stage/cl-gen-ispc-mandelbrot/source//mandelbrot.ispc
Auto-annotation:  off

--------------------------------------------------------------------------------
           Ir  I1mr  ILmr          Dr   D1mr  DLmr         Dw    D1mw   DLmw 
--------------------------------------------------------------------------------
1,556,061,808 5,249 2,908 241,704,210 36,761 9,235 55,352,089 336,109 20,123  PROGRAM TOTALS

--------------------------------------------------------------------------------
           Ir  I1mr ILmr          Dr   D1mr  DLmr         Dw    D1mw   DLmw  file:function
--------------------------------------------------------------------------------
1,550,032,680    30   12 240,203,160     10     2 54,642,520 328,298 16,384  /home/martin/stage/cl-gen-ispc-mandelbrot/source//mandelbrot.ispc:mandelbrot_ispc

--------------------------------------------------------------------------------
-- User-annotated source: /home/martin/stage/cl-gen-ispc-mandelbrot/source//mandelbrot.ispc
--------------------------------------------------------------------------------
         Ir I1mr ILmr         Dr D1mr DLmr         Dw    D1mw   DLmw 

          .    .    .          .    .    .          .       .      .  static inline int mandel(float c_re, float c_im) {
          .    .    .          .    .    .          .       .      .    {
          .    .    .          .    .    .          .       .      .      float z_re = c_re;
          .    .    .          .    .    .          .       .      .      float z_im = c_im;
          .    .    .          .    .    .          .       .      .      int ret = 0;
          .    .    .          .    .    .          .       .      .  
425,425,600    1    1 79,644,420    0    0          0       0      0      for (unsigned int i = 0; (i < 256); i += 1) {
          .    .    .          .    .    .          .       .      .        {
 53,096,280    0    0          0    0    0          0       0      0          float re2 = (z_re * z_re);
106,192,560    0    0          0    0    0          0       0      0          float im2 = (z_im * z_im);
          .    .    .          .    .    .          .       .      .  
185,836,980    3    1 26,548,140    3    1          0       0      0          if (((4.e+0) < (re2 + im2))) {
 53,096,280    1    1          0    0    0          0       0      0            ret = i;
212,617,180    3    1          0    0    0          0       0      0            break;
          .    .    .          .    .    .          .       .      .          }
          .    .    .          .    .    .          .       .      .  
          .    .    .          .    .    .          .       .      .          {
 52,632,160    0    0          0    0    0          0       0      0            float new_re = ((z_re * z_re) - (z_im * z_im));
 52,632,160    0    0          0    0    0          0       0      0            float new_im = ((2.e+0) * z_re * z_im);
          .    .    .          .    .    .          .       .      .  
131,580,400    0    0 78,948,240    1    0          0       0      0            z_re = (c_re + new_re);
211,456,880    1    1 53,096,280    0    0          0       0      0            z_im = (c_im + new_im);
          .    .    .          .    .    .          .       .      .          }
          .    .    .          .    .    .          .       .      .        }
          .    .    .          .    .    .          .       .      .      }
          .    .    .          .    .    .          .       .      .  
          .    .    .          .    .    .          .       .      .      return ret;
          .    .    .          .    .    .          .       .      .    }
          .    .    .          .    .    .          .       .      .  }
          .    .    .          .    .    .          .       .      .  
          .    .    .          .    .    .          .       .      .  export void mandelbrot_ispc(uniform float x0, uniform float y0,
          .    .    .          .    .    .          .       .      .                              uniform float dx, uniform float dy,
          .    .    .          .    .    .          .       .      .                              uniform int output[], uniform int output_row_start,
          .    .    .          .    .    .          .       .      .                              uniform int output_col_start,
          .    .    .          .    .    .          .       .      .                              uniform int output_row_end,
          .    .    .          .    .    .          .       .      .                              uniform int output_col_end) {
     71,680    6    2          0    0    0     40,960       0      0    for (uniform int j = output_row_start; (j < output_row_end); j += 1) {
          .    .    .          .    .    .          .       .      .      {
  1,638,400    3    1    327,680    1    0    163,840       0      0        float y = (y0 + (j * dy));
    327,680    1    0          0    0    0          0       0      0        unsigned int i0 = (j * 512);
          .    .    .          .    .    .          .       .      .  
  2,068,480    0    0    655,360    3    1          0       0      0        foreach (i = output_col_start... output_col_end) {
          .    .    .          .    .    .          .       .      .          {
 59,701,080    8    3    983,040    2    0 53,782,360     618      0            float x = (x0 + (i * dx));
          .    .    .          .    .    .          .       .      .            int index = (i + i0);
          .    .    .          .    .    .          .       .      .  
  1,658,880    3    1          0    0    0    655,360 327,680 16,384            output[index] = mandel(x, y);
          .    .    .          .    .    .          .       .      .          }
          .    .    .          .    .    .          .       .      .        }
          .    .    .          .    .    .          .       .      .      }
          .    .    .          .    .    .          .       .      .    }
          .    .    .          .    .    .          .       .      .  }

--------------------------------------------------------------------------------
 Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw 
--------------------------------------------------------------------------------
100    1    0 99    0    0 99   98   81  percentage of events annotated

